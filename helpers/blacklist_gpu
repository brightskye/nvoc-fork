#!/bin/bash

# Build the device option strings required by each miner
# PARAMS    : $1= GPUS, $2=BLACKLIST_GPUS
# RESULT    : Modified global variable BMINER_OPTS, CCMINER_OPTS, CLAYMORE_OPTS, DSTM_OPTS, ETHMINER_OPTS, EWBF_OPTS
#
# Miner belows use specified devices
# Bminer    : -devices 0,1,2,3,4,5,6,7,8
# CCMINER   : --devices 0,1,2,3,4,5,6,7,8
# CLAYMORE  : -di 0123456789abcdefghi
# DSTM      : --dev 0 1 2 3 4 5 6 7 8
# ETHMINER  : --cuda_devices 0 1 2 3 4 5 6 7 8 
# EWBF      : --cuda_devices 0 1 2 3 4 5 6 7 8
# GENOIL    : ??? same as ETHMINER ??? skipping for the moment
# Note: For ETHMINER, you might need to set environmental variable to have cuda_devices sorted by PCI_BUS ID
#       refer to https://github.com/ethereum-mining/ethminer FAQ: CUDA GPU order changes sometimes. What can I do?
#

#
# 
#

if [[ -z "$BLACKLIST_GPUS" ]]; then
    echo "BLACKLIST_GPUS not set"
else
    # Export CUDA_DEVICE_ORDER env variables ??? not sure if this work
    export CUDA_DEVICE_ORDER=PCI_BUS_ID
    # [[ -v FOO[@] ]] test if array exists
    # Array doesn't exists till it's assign value
    if ! [[ -v $BLACKLIST_GPU_ARRAY[@] ]]; then
        #echo "declare BLACKLIST_GPU_ARRAY"
        declare -ga BLACKLIST_GPU_ARRAY
    fi
    for i in $BLACKLIST_GPUS; do
        BLACKLIST_GPU_ARRAY[$((i))]=$i
    done
    # echo ${BLACKLIST_GPU_ARRAY[@]}
fi
# Set each miner's device opt accordingly
# @Param    $1 = number of GPUS, if not provided, default to Global variable GPUS or query nvidia-smi if not found
# @Outcome  BMINER_OPTS, CCMINER_OPTS, CLAYMORE_OPTS, DSTM_OPTS, ETHMINER_OPTS, EWBF_OPTS will be appended with their respective options for device
# @Note     If devices options is already been configured in 1bash, this function will not take effect
function build_miner_devices_opt () {
    local gpus=${1:-$GPUS}
    # build_blacklist_array
    if ! [[ -v $BLACKLIST_GPU_ARRAY[@] ]]; then
        if [[ -z "$gpus" ]]; then
            #echo "gpu count is not passed in as arguments nor found in global GPUS"
            #echo "Reading gpu count from nvidia-smi"
            gpus= $(nvidia-smi -i 0 --query-gpu=count --format=csv,noheader,nounits)
        fi
        # Get all runnable devices
        local SPACE_SEPERATED_DEVICES=""
        local COMMA_SEPERATED_DEVICES=""
        local CLAYMORE_DEVICES=""
        local ASCII_a_VALUE=97
        for ((i=0; i<$gpus; i++)); do
            if ! [[ ${BLACKLIST_GPU_ARRAY[$i]} ]]; then
                SPACE_SEPERATED_DEVICES+="$i "
                COMMA_SEPERATED_DEVICES+="$i,"
                if [[ "$i" -lt "10"  ]]; then
                    CLAYMORE_DEVICES+="$i"
                elif [[ "$i" -lt $((10+26))  ]]; then
                    # 26 alphabet characters
                    # $(printf \\$(printf '%03o' $(($i-10+97)))) will print their char from ascii decimal value
                    # $(printf '%03o' $(($i-10+97)))) will converts the number from decimal to octal
                    # decimal value 97 represent a
                    CLAYMORE_DEVICES+=$(printf \\$(printf '%03o' $(($i-10+$ASCII_a_VALUE))))
                fi
            fi
        done
        #strip last comma
        COMMA_SEPERATED_DEVICES="${COMMA_SEPERATED_DEVICES%?}"
        
        # Add device list to respective miner opts
        # Skip if miner opts already specified the device option
        if ! [[ " $BMINER_OPTS " =~ "-devices" ]]; then
            BMINER_OPTS+=" -devices $COMMA_SEPERATED_DEVICES"
        fi
        if ! [[ " $CCMINER_OPTS " =~ "--devices" ]]; then
            CCMINER_OPTS+=" --devices $COMMA_SEPERATED_DEVICES"
        fi
        if ! [[ " $CLAYMORE_OPTS " =~ "-di" ]]; then
            CLAYMORE_OPTS+=" -di $CLAYMORE_DEVICES"
        fi
        if ! [[ " $DSTM_OPTS " =~ "--dev" ]]; then
            DSTM_OPTS+=" --dev $SPACE_SEPERATED_DEVICES"
        fi
        if ! [[ " $ETHMINER_OPTS " =~ "--cuda_devices" ]]; then
            ETHMINER_OPTS+=" --cuda_devices $SPACE_SEPERATED_DEVICES"
        fi
        if ! [[ " $EWBF_OPTS " =~ " --cuda_devices" ]]; then
            EWBF_OPTS+=" --cuda_devices $SPACE_SEPERATED_DEVICES"
        fi
    else
        echo "No BLACKLIST_GPU_ARRAY detected"
    fi    
}
